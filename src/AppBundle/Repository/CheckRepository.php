<?php

namespace AppBundle\Repository;

/**
 * CheckRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CheckRepository extends \Doctrine\ORM\EntityRepository
{
   /*
    * Получаем все чеки в отсортированном порядке
    */
    public function findAllChecks($start_date, $end_date, $user)
    {
        $qb = $this->createQueryBuilder('p')
                    ->select('p')
                    ->orderBy('p.created', 'DESC')
                    ->where('p.user = :user')
                    ->setParameter('user', $user);
                    
        if ($start_date && !$end_date) {
        		 $qb->andWhere('p.created >= :start_date')
        		    ->setParameter('start_date', $start_date);
        }

        if (!$start_date && $end_date) {
        		 $qb->andWhere('p.created <= :end_date')
        		    ->setParameter('end_date', $end_date);
        }

        if ($start_date && $end_date) {
        		 $qb->andWhere('p.created >= :start_date')
        		 	->andWhere('p.created <= :end_date')
        		    ->setParameter('start_date', $start_date)
        		    ->setParameter('end_date', $end_date);
        }

        return $qb->getQuery()->getResult();
    }

   /*
    * Получаем весь заработок на точках
    */
    public function getAllEarning($bar, $date)
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('SUM(b.total) as total')
                   ->where('b.bar = :id')
                   ->setParameter('id', $bar)
                   ->andWhere('DATE(b.created) > :date')
                   ->setParameter('date', $date)
                   ->groupBy('b.bar');

        return $qb->getQuery()->getResult();
    }

   /*
    * Получаем весь заработок на точках
    */
    public function getProfit($user, $date)
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('SUM(b.total) as total')
                   ->where('b.user = :user')
                   ->andWhere('DATE(b.created) = :date')
                   ->setParameter('user', $user)
                   ->setParameter('date', $date)
                   ->groupBy('b.bar');

        return $qb->getQuery()->getResult();
    }

   /*
    * Получаем весь заработок в конкретной точке для юзера
    */
    public function getEarningsUser($bar)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c as check')
                   ->innerJoin('c.user', 'u')
                   ->addSelect('SUM(c.total) as total')
                   ->addSelect('COUNT(c.id) as count_earning')
                   ->andWhere('u.bar = :bar')
                   ->setParameter('bar', $bar)
                   ->groupBy('c.user');

        return $qb->getQuery()->getResult();
    }

    /*
    * Получаем весь заработок на точках
    */
    public function getAllEarningBars()
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->addSelect('SUM(c.total) as total');

        return $qb->getQuery()->getResult();
    }

   /*
    * Получаем весь заработок на точках
    */
    public function getEarningBar($id, $date)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->addSelect('SUM(c.total) as total')
                   ->where('c.bar = :id')
                   ->setParameter('id', $id)
                   ->andWhere('DATE(c.created) = :date')
                   ->setParameter('date', $date);

        return $qb->getQuery()->getResult();
    }

   /*
    * Получаем кол-во выручку в баре за период времени
    */
    public function getSalesBar($bar, $start_date, $end_date)
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('SUM(b.total) as total')
                   ->where('b.bar = :bar')
                   ->setParameter('bar', $bar)
                   ->andWhere('DATE(b.created) >= :start_date')
                   ->andWhere('DATE(b.created) <= :end_date')
                   ->setParameter('end_date', $end_date)
                   ->setParameter('start_date', $start_date)
                   ->groupBy('b.bar');

        return $qb->getQuery()->getResult();
    }
}
