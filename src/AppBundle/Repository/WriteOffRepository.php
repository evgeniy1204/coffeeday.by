<?php

namespace AppBundle\Repository;

/**
 * WriteOffRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WriteOffRepository extends \Doctrine\ORM\EntityRepository
{
   /*
    * получаем все списанные продукты
    */
    public function getAllWriteOff($start_date)
    {
         $qb = $this->createQueryBuilder('p')
         			->where('DATE(p.created) >= :start_date')
         			->setParameter('start_date', $start_date)
                    ->orderBy('p.created', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /*
    * получаем списанные продукты пол фильтру
    */
    public function getWriteOff($start_date, $end_date, $bar, $isGroup)
    {
        $qb = $this->createQueryBuilder('p')
        		    ->select('p')
        			->innerJoin('p.stock', 's')
         			->where('s.bar = :bar')
         			->setParameter('bar', $bar);

        if ($start_date && !$end_date) {
        		 $qb->andWhere('DATE(p.created) >= :start_date')
        		    ->setParameter('start_date', $start_date);
        }

        if (!$start_date && $end_date) {
        		 $qb->andWhere('DATE(p.created) <= :end_date')
        		    ->setParameter('end_date', $end_date);
        }

        if ($start_date && $end_date) {
        		 $qb->andWhere('DATE(p.created) >= :start_date')
        		 	->andWhere('DATE(p.created) <= :end_date')
        		    ->setParameter('start_date', $start_date)
        		    ->setParameter('end_date', $end_date);
        }
        if ($isGroup) {
        	$qb->addSelect('SUM(p.count) as count_prod')
        		   ->orderBy('count_prod', 'DESC')
        		   ->groupBy('s.ingredient');
		} else {
			$qb->orderBy('p.created', 'DESC');	
		}
        		

        return $qb->getQuery()->getResult();
    }
}
